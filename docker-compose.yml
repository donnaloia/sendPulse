version: '3.8'

services:
# Business Logic Service written in Go
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: business-logic-service
    ports:
      - "8080:8080"
    environment:
      - ENV=development
    volumes:
      - .:/app
    restart: unless-stopped
    # Optional healthcheck
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - db


  # Database for our business logic service
  db:
    image: postgres:latest
    container_name: business-logic-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=sendpulse
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped


  # Authentication Service written in Gleam
  auth:
    image: bendonnaloia/authentication-service:latest
    pull_policy: always
    container_name: authentication-service
    ports:
      - "8081:8000"
    environment:
      - DB_HOST=auth_db
      - DB_PORT=5433
      - DB_USER=admin
      - DB_PASSWORD=admin
      - DB_DATABASE=auth_database
      - SECRET_KEY=temp_secret
      - DATABASE_URL=postgresql://admin:admin@auth_db:5433/auth_database
    restart: always


  # Database for our authentication service
  auth_db:
    image: postgres:latest
    container_name: authentication-postgres
    ports:
      - "5433:5433"
    command: postgres -p 5433
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=auth_database
    volumes:
      - auth_db_data:/var/lib/postgresql/data


  # Permissions Service written in Gleam
  permissions_service:
    image: bendonnaloia/permissions-service:latest
    pull_policy: always
    container_name: permissions-service
    build: .
    ports:
      - "8000:8000"
    environment:
      # will update later
      DB_HOST: mongodb
      DB_PORT: 27017
      DB_USER: admin
      DB_PASSWORD: password
      REDIS_HOST: redis
      REDIS_PASSWORD: password
      SECRET_KEY: temp_secret
    depends_on:
      - mongodb  # Ensure Postgres is started before Gleam


  # Database for our permissions service
  mongodb:
    image: mongo:latest
    container_name: permissions-mongodb
    ports:
    - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: permissions
    volumes:
      - mongodb:/data/db  # Persistant storage for Mongo data
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro # Sets up auth


  # Web app for debugging mongodb
  mongo-express:
    image: mongo-express
    container_name: permissions-mongodb-express
    restart: always
    ports:
      - 8082:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://admin:password@mongodb:27017/
      ME_CONFIG_BASICAUTH: false
  

  # Redis for caching request metadata (used for prometheus metrics)
  redis:
    image: redis:latest
    container_name: permissions-redis
    restart: always
    ports:
      - "6379:6379"
    environment:
      REDIS_HOST: redis
      REDIS_PASSWORD: password
      REDIS_PORT: 6379
      REDIS_DATABASES: 16
    # volumes:
    #   - ./redis/dÐ°ta:/root/redis
    #   - ./redis/redis.conf:/usr/local/etc/redis/redis.conf


  # Prometheus for our permissions service
  prometheus:
    image: prom/prometheus
    container_name: permissions-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus


  # Grafana for our permissions service
  grafana:
    image: grafana/grafana
    container_name: permissions-grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./grafana_data:/etc/grafana/provisioning/datasources



  # frontend:
  #   image: node:18-alpine
  #   container_name: sendpulse-frontend
  #   ports:
  #     - "3000:3000"
  #   working_dir: /app
  #   command: >
  #     sh -c "apk add --no-cache git &&
  #            rm -rf * &&
  #            git clone https://github.com/donnaloia/nextjs-shadcn-starter . &&
  #            npm install --legacy-peer-deps &&
  #            npm run dev"
  #   environment:
  #     - NODE_ENV=development
  #   volumes:
  #     - nextjs_data:/app
  #   restart: unless-stopped


  # Zookeeper for Kafka
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:latest
  #   container_name: permissions-zookeeper
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   ports:
  #     - "2181:2181"
  #   volumes:
  #     - zookeeper_data:/var/lib/zookeeper/data
  #     - zookeeper_log:/var/lib/zookeeper/log

  # # Kafka broker
  # kafka:
  #   image: confluentinc/cp-kafka:latest
  #   container_name: permissions-kafka
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #     - "29092:29092"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #   volumes:
  #     - kafka_data:/var/lib/kafka/data

  # # Optional: Kafka UI for debugging
  # kafka-ui:
  #   image: provectuslabs/kafka-ui:latest
  #   container_name: permissions-kafka-ui
  #   depends_on:
  #     - kafka
  #   ports:
  #     - "8083:8080"
  #   environment:
  #     KAFKA_CLUSTERS_0_NAME: local
  #     KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
  #     SERVER_SERVLET_CONTEXT_PATH: /


volumes:
  postgres_data:
  auth_db_data:
  nextjs_data:
  auth_service_data:
  mongodb:
  prom_data:
  grafana_data:
  # zookeeper_data:
  # zookeeper_log:
  # kafka_data: